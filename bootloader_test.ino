#include "application.h"

SYSTEM_MODE(SEMI_AUTOMATIC);

// Prototypes
int bootload();
int parseAndFlashRow(int row);
int sendCommand(char address, int data_len, char * data);
int getResponse(char address, char bytes);
int verifyStatus();
int findStartLocation();
int verifyChecksum();
int getFlashSize();
int getAppStatus();
int eraseRow();
int syncBootloader();
int setActiveApp();
int sendData(int data_len, char * data);
int enterBootloader();
int programRow(int array_id, int row_number, int data_len, char* data);
int verifyRow(char array_id, int row_number, char check);
int exitBootloader();

void setup(){
  pinMode(D3, OUTPUT);
  digitalWrite(D3, 1);
  Wire.begin();
  Serial.begin(115200);
  while(Serial.read() != '\r'){

  }
  bootload();

  Particle.connect();
}

void loop(){

  
}

#define CMD_VERIFY_CHECKSUM 0x31
#define CMD_GET_FLASH_SIZE  0x32
#define CMD_GET_APP_STATUS  0x33
#define CMD_ERASE_ROW       0x34
#define CMD_SYNC_BOOTLOAD   0x35
#define CMD_SET_ACTIVE_APP  0x36
#define CMD_SEND_DATA       0x37
#define CMD_ENTER_BOOTLOAD  0x38
#define CMD_PROGRAM_ROW     0x39
#define CMD_VERIFY_ROW      0x3A
#define CMD_EXIT_BOOTLOADER 0x3B

#define STATUS_SUCCESS      0x00
#define STATUS_ERR_VERIFY   0x02
#define STATUS_ERR_LENGTH   0x03
#define STATUS_ERR_DATA     0x04
#define STATUS_ERR_CMD      0x05
#define STATUS_ERR_DEVICE   0x06
#define STATUS_ERR_VERSION  0x07
#define STATUS_ERR_CHECK    0x08
#define STATUS_ERR_ARRAY    0x09
#define STATUS_ERR_ROW      0x0A
#define STATUS_ERR_APP      0x0C
#define STATUS_ERR_ACTIVE   0x0D
#define STATUS_ERR_UNK      0x0F

#define START_BYTE  0x01
#define END_BYTE    0x17

char dev_address = 0x08;

#define CYACD_ROWS        21
#define CYACD_ROW_LENGTH  134

char cyacd_file[CYACD_ROWS][CYACD_ROW_LENGTH] =
{
  {0x19, 0x0B, 0x11, 0xA9, 0x00, 0x00},
  {0x00, 0x00, 0x29, 0x00, 0x80, 0x00, 0x10, 0x00, 0x20, 0x91, 0x14, 0x00, 0x00, 0x05, 0x17, 0x00, 0x00, 0x05, 0x17, 0x00, 0x00, 0x10, 0xB5, 0x03, 0x4B, 0x83, 0xF3, 0x08, 0x88, 0x00, 0xF0, 0xD0, 0xFB, 0x00, 0xF0, 0x3A, 0xF9, 0x00, 0x10, 0x00, 0x20, 0x10, 0xB5, 0x72, 0xB6, 0x38, 0x4A, 0x39, 0x4B, 0xEE, 0x21, 0x1A, 0x60, 0x08, 0x22, 0x38, 0x4B, 0x38, 0x4C, 0x1A, 0x60, 0x38, 0x4A, 0x39, 0x4B, 0x18, 0x20, 0x1A, 0x60, 0x3F, 0x22, 0x38, 0x4B, 0x1A, 0x60, 0x38, 0x4A, 0x38, 0x4B, 0x1A, 0x60, 0x8D, 0x22, 0x38, 0x4B, 0x1A, 0x60, 0x38, 0x4B, 0xF9, 0x32, 0x1A, 0x60, 0x37, 0x4B, 0xFE, 0x3A, 0x1A, 0x60, 0x37, 0x4B, 0x59, 0x3A, 0x1A, 0x60, 0x06, 0x23, 0x36, 0x4A, 0x13, 0x60, 0x36, 0x4A, 0x11, 0x60, 0x36, 0x4A, 0xEB, 0x39, 0x11, 0x60, 0x35, 0x49, 0x36, 0x4A, 0x11, 0x60, 0x36, 0x4A, 0x13, 0x60, 0x0C, 0x33, 0x0D},
  {0x00, 0x00, 0x2A, 0x00, 0x80, 0x23, 0x60, 0x00, 0xF0, 0x23, 0xFB, 0x80, 0x22, 0xC4, 0x20, 0x33, 0x4B, 0x52, 0x00, 0x1A, 0x60, 0x32, 0x49, 0x33, 0x4B, 0xC0, 0x02, 0x19, 0x60, 0x32, 0x49, 0x08, 0x60, 0x32, 0x49, 0x80, 0x20, 0x19, 0x60, 0x32, 0x49, 0x00, 0x06, 0x0A, 0x60, 0xFE, 0x21, 0x31, 0x4A, 0x09, 0x02, 0x1A, 0x60, 0x30, 0x4A, 0x11, 0x60, 0xE0, 0x21, 0x30, 0x4A, 0x09, 0x01, 0x1A, 0x60, 0x2F, 0x4A, 0x11, 0x60, 0x2F, 0x4A, 0x30, 0x49, 0x1A, 0x60, 0x00, 0x22, 0x2F, 0x4B, 0x1A, 0x60, 0x42, 0x32, 0x0A, 0x60, 0x2E, 0x49, 0x0A, 0x60, 0x2E, 0x49, 0x0A, 0x60, 0x44, 0x21, 0x2E, 0x4A, 0x11, 0x60, 0x2E, 0x4A, 0x03, 0x39, 0x11, 0x60, 0x2D, 0x4A, 0x01, 0x39, 0x11, 0x60, 0x2D, 0x4A, 0x03, 0x31, 0x11, 0x60, 0x11, 0x22, 0x22, 0x60, 0x2B, 0x4A, 0x33, 0x39, 0x11, 0x60, 0x2B, 0x49, 0x0A, 0x68, 0x02, 0x43, 0x67},
  {0x00, 0x00, 0x2B, 0x00, 0x80, 0x0A, 0x60, 0x20, 0x22, 0x19, 0x68, 0x0A, 0x43, 0x1A, 0x60, 0x10, 0xBD, 0x08, 0x08, 0x00, 0x00, 0x00, 0x01, 0x02, 0x40, 0x00, 0x02, 0x02, 0x40, 0x30, 0x00, 0x10, 0x40, 0xEE, 0xEE, 0x00, 0x00, 0x00, 0x03, 0x02, 0x40, 0x00, 0x00, 0x04, 0x40, 0xB6, 0x6D, 0x1B, 0x02, 0x08, 0x00, 0x04, 0x40, 0x00, 0x01, 0x04, 0x40, 0x08, 0x01, 0x04, 0x40, 0x18, 0x01, 0x04, 0x40, 0x00, 0x02, 0x04, 0x40, 0x08, 0x02, 0x04, 0x40, 0x18, 0x02, 0x04, 0x40, 0x00, 0x03, 0x04, 0x40, 0xA4, 0x0D, 0x00, 0x00, 0x08, 0x03, 0x04, 0x40, 0x18, 0x04, 0x04, 0x40, 0x08, 0x03, 0x01, 0x40, 0x42, 0xFF, 0x00, 0x80, 0x00, 0x00, 0x01, 0x40, 0x10, 0x03, 0x01, 0x40, 0x44, 0xFF, 0x00, 0x80, 0x04, 0x03, 0x01, 0x40, 0x41, 0xFF, 0x00, 0x80, 0x00, 0x03, 0x01, 0x40, 0x40, 0xFF, 0x00, 0x80, 0x0C, 0x03, 0x01, 0x40, 0x44},
  {0x00, 0x00, 0x2C, 0x00, 0x80, 0x43, 0xFF, 0x00, 0x80, 0x1C, 0x01, 0x01, 0x40, 0x28, 0x00, 0x03, 0x40, 0x18, 0x01, 0x01, 0x40, 0x14, 0x01, 0x01, 0x40, 0x10, 0x01, 0x01, 0x40, 0x0C, 0x01, 0x01, 0x40, 0x08, 0x01, 0x01, 0x40, 0x04, 0x01, 0x01, 0x40, 0xC0, 0x02, 0x0B, 0x40, 0x00, 0x20, 0x02, 0x40, 0x10, 0xB5, 0x06, 0x4C, 0x23, 0x78, 0x00, 0x2B, 0x07, 0xD1, 0x05, 0x4B, 0x00, 0x2B, 0x02, 0xD0, 0x04, 0x48, 0x00, 0xE0, 0x00, 0xBF, 0x01, 0x23, 0x23, 0x70, 0x10, 0xBD, 0x08, 0x01, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x10, 0x1D, 0x00, 0x00, 0x08, 0x4B, 0x10, 0xB5, 0x00, 0x2B, 0x03, 0xD0, 0x07, 0x49, 0x08, 0x48, 0x00, 0xE0, 0x00, 0xBF, 0x07, 0x48, 0x03, 0x68, 0x00, 0x2B, 0x00, 0xD1, 0x10, 0xBD, 0x06, 0x4B, 0x00, 0x2B, 0xFB, 0xD0, 0x98, 0x47, 0xF9, 0xE7, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x01, 0x00, 0x20, 0xA8},
  {0x00, 0x00, 0x2D, 0x00, 0x80, 0x10, 0x1D, 0x00, 0x00, 0x88, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x10, 0xB5, 0x01, 0x20, 0x00, 0xF0, 0xE6, 0xF8, 0x10, 0xBD, 0xC0, 0x46, 0x10, 0xB5, 0x01, 0x20, 0x00, 0xF0, 0xCC, 0xF9, 0x10, 0xBD, 0xC0, 0x46, 0x10, 0xB5, 0x01, 0x20, 0x00, 0xF0, 0x50, 0xF9, 0x10, 0xBD, 0xC0, 0x46, 0x10, 0xB5, 0x62, 0xB6, 0x10, 0x48, 0x00, 0xF0, 0xD9, 0xF8, 0x10, 0x48, 0x00, 0xF0, 0xC2, 0xF9, 0x0F, 0x48, 0x00, 0xF0, 0x49, 0xF9, 0x00, 0xF0, 0x77, 0xF8, 0x00, 0x20, 0x00, 0xF0, 0xC0, 0xF8, 0xFF, 0x20, 0x00, 0xF0, 0xB5, 0xF8, 0x00, 0xF0, 0x5B, 0xF9, 0x7D, 0x20, 0x00, 0xF0, 0xA4, 0xF9, 0xFF, 0x20, 0x00, 0xF0, 0x99, 0xF9, 0x00, 0xF0, 0xDD, 0xF8, 0x9B, 0x20, 0x00, 0xF0, 0x26, 0xF9, 0xFF, 0x20, 0x00, 0xF0, 0x1B, 0xF9, 0xFE, 0xE7, 0x8D, 0x16, 0x00, 0x00, 0x99, 0x16, 0x00, 0x00, 0x3A},
  {0x00, 0x00, 0x2E, 0x00, 0x80, 0xA5, 0x16, 0x00, 0x00, 0x10, 0xB5, 0x00, 0xF0, 0xD7, 0xFA, 0x03, 0x68, 0x0C, 0x2B, 0x00, 0xD0, 0xFE, 0xE7, 0xFE, 0xE7, 0xF8, 0xB5, 0x10, 0x4E, 0x00, 0x2E, 0x18, 0xD0, 0x00, 0x20, 0x0F, 0x4D, 0xA9, 0x68, 0x2C, 0x68, 0x6A, 0x68, 0x00, 0x29, 0x05, 0xD0, 0x00, 0x23, 0xE7, 0x58, 0x04, 0x33, 0x80, 0xC2, 0x99, 0x42, 0xFA, 0xD1, 0xE9, 0x68, 0x00, 0x23, 0x00, 0x29, 0x03, 0xD0, 0xD0, 0x50, 0x04, 0x33, 0x99, 0x42, 0xFB, 0xD1, 0x01, 0x3E, 0x10, 0x35, 0x00, 0x2E, 0xE8, 0xD1, 0x00, 0xF0, 0xB9, 0xFA, 0xFF, 0xF7, 0xAD, 0xFF, 0xFE, 0xE7, 0x01, 0x00, 0x00, 0x00, 0x54, 0x1D, 0x00, 0x00, 0x70, 0xB5, 0x00, 0x22, 0x00, 0x23, 0x0F, 0x4C, 0x0F, 0x48, 0x10, 0x4D, 0x04, 0xE0, 0x01, 0x33, 0xA1, 0x50, 0x04, 0x32, 0x20, 0x2B, 0x08, 0xD0, 0x01, 0x00, 0x03, 0x2B, 0xF7, 0xD8, 0x51, 0x59, 0x4A},
  {0x00, 0x00, 0x2F, 0x00, 0x80, 0x01, 0x33, 0xA1, 0x50, 0x04, 0x32, 0x20, 0x2B, 0xF6, 0xD1, 0xFF, 0xF7, 0x8B, 0xFE, 0x08, 0x4B, 0x1A, 0x68, 0x00, 0x2A, 0x00, 0xD1, 0x1A, 0x60, 0x80, 0x22, 0x06, 0x4B, 0x92, 0x05, 0x1A, 0x60, 0x70, 0xBD, 0xC0, 0x46, 0x00, 0x00, 0x00, 0x20, 0x05, 0x17, 0x00, 0x00, 0x80, 0x14, 0x00, 0x00, 0x80, 0x00, 0x00, 0x20, 0x08, 0xED, 0x00, 0xE0, 0x10, 0xB5, 0x17, 0x49, 0x0A, 0x78, 0x00, 0x2A, 0x18, 0xD1, 0x82, 0x20, 0x15, 0x4B, 0xC0, 0x04, 0x18, 0x60, 0x18, 0x68, 0x31, 0x24, 0x18, 0x60, 0x13, 0x48, 0x02, 0x60, 0x18, 0x68, 0x18, 0x60, 0x0C, 0x20, 0x12, 0x4B, 0x18, 0x60, 0x01, 0x23, 0x11, 0x48, 0x03, 0x60, 0x11, 0x48, 0x04, 0x60, 0x11, 0x48, 0xCE, 0x34, 0x04, 0x60, 0x11, 0x48, 0x02, 0x60, 0x0B, 0x70, 0x00, 0xF0, 0x35, 0xFA, 0x08, 0x23, 0x0F, 0x4A, 0x11, 0x68, 0x0B, 0x43, 0xA8},
  {0x00, 0x00, 0x30, 0x00, 0x80, 0x13, 0x60, 0x00, 0xF0, 0x32, 0xFA, 0x00, 0xF0, 0x2C, 0xFA, 0x80, 0x22, 0x0B, 0x4B, 0x12, 0x05, 0x1A, 0x60, 0x00, 0xF0, 0x2A, 0xFA, 0x10, 0xBD, 0x24, 0x01, 0x00, 0x20, 0xC0, 0x01, 0x06, 0x40, 0xC8, 0x01, 0x06, 0x40, 0xE4, 0x01, 0x06, 0x40, 0xF8, 0x01, 0x06, 0x40, 0xE8, 0x01, 0x06, 0x40, 0xD4, 0x01, 0x06, 0x40, 0xCC, 0x01, 0x06, 0x40, 0x00, 0x00, 0x06, 0x40, 0x08, 0x00, 0x06, 0x40, 0x02, 0x4B, 0x00, 0x04, 0x00, 0x0C, 0x18, 0x60, 0x70, 0x47, 0xC0, 0x46, 0xD4, 0x01, 0x06, 0x40, 0x02, 0x4B, 0x00, 0x04, 0x00, 0x0C, 0x18, 0x60, 0x70, 0x47, 0xC0, 0x46, 0xCC, 0x01, 0x06, 0x40, 0x01, 0x4B, 0x18, 0x60, 0x70, 0x47, 0xC0, 0x46, 0xF0, 0x01, 0x06, 0x40, 0x10, 0xB5, 0x80, 0x24, 0x08, 0x4B, 0xE4, 0x01, 0x1C, 0x60, 0x08, 0x4B, 0x98, 0x67, 0x00, 0xF0, 0xF2, 0xF9, 0xC0, 0x23, 0x54},
  {0x00, 0x00, 0x31, 0x00, 0x80, 0x06, 0x4A, 0x1B, 0x04, 0x11, 0x68, 0x0B, 0x43, 0x13, 0x60, 0x00, 0xF0, 0xEE, 0xF9, 0x04, 0x4B, 0x1C, 0x60, 0x10, 0xBD, 0x80, 0xE1, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x20, 0x0C, 0xE4, 0x00, 0xE0, 0x00, 0xE1, 0x00, 0xE0, 0x10, 0xB5, 0x17, 0x49, 0x0A, 0x78, 0x00, 0x2A, 0x18, 0xD1, 0x82, 0x20, 0x15, 0x4B, 0xC0, 0x04, 0x18, 0x60, 0x18, 0x68, 0x31, 0x24, 0x18, 0x60, 0x13, 0x48, 0x02, 0x60, 0x18, 0x68, 0x18, 0x60, 0x0C, 0x20, 0x12, 0x4B, 0x18, 0x60, 0x01, 0x23, 0x11, 0x48, 0x03, 0x60, 0x11, 0x48, 0x04, 0x60, 0x11, 0x48, 0xCE, 0x34, 0x04, 0x60, 0x11, 0x48, 0x02, 0x60, 0x0B, 0x70, 0x00, 0xF0, 0xBF, 0xF9, 0x10, 0x23, 0x0F, 0x4A, 0x11, 0x68, 0x0B, 0x43, 0x13, 0x60, 0x00, 0xF0, 0xBC, 0xF9, 0x00, 0xF0, 0xB6, 0xF9, 0x80, 0x22, 0x0B, 0x4B, 0x52, 0x05, 0x1A, 0x60, 0x00, 0xF0, 0x4D},
  {0x00, 0x00, 0x32, 0x00, 0x80, 0xB4, 0xF9, 0x10, 0xBD, 0x25, 0x01, 0x00, 0x20, 0x00, 0x02, 0x06, 0x40, 0x08, 0x02, 0x06, 0x40, 0x24, 0x02, 0x06, 0x40, 0x38, 0x02, 0x06, 0x40, 0x28, 0x02, 0x06, 0x40, 0x14, 0x02, 0x06, 0x40, 0x0C, 0x02, 0x06, 0x40, 0x00, 0x00, 0x06, 0x40, 0x08, 0x00, 0x06, 0x40, 0x02, 0x4B, 0x00, 0x04, 0x00, 0x0C, 0x18, 0x60, 0x70, 0x47, 0xC0, 0x46, 0x14, 0x02, 0x06, 0x40, 0x02, 0x4B, 0x00, 0x04, 0x00, 0x0C, 0x18, 0x60, 0x70, 0x47, 0xC0, 0x46, 0x0C, 0x02, 0x06, 0x40, 0x01, 0x4B, 0x18, 0x60, 0x70, 0x47, 0xC0, 0x46, 0x30, 0x02, 0x06, 0x40, 0x10, 0xB5, 0x80, 0x24, 0x08, 0x4B, 0x24, 0x02, 0x1C, 0x60, 0x08, 0x4B, 0xD8, 0x67, 0x00, 0xF0, 0x7C, 0xF9, 0xC0, 0x23, 0x06, 0x4A, 0x1B, 0x06, 0x11, 0x68, 0x0B, 0x43, 0x13, 0x60, 0x00, 0xF0, 0x78, 0xF9, 0x04, 0x4B, 0x1C, 0x60, 0x10, 0xBD, 0xAD},
  {0x00, 0x00, 0x33, 0x00, 0x80, 0x80, 0xE1, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x20, 0x0C, 0xE4, 0x00, 0xE0, 0x00, 0xE1, 0x00, 0xE0, 0x10, 0xB5, 0x17, 0x49, 0x0A, 0x78, 0x00, 0x2A, 0x18, 0xD1, 0x82, 0x20, 0x15, 0x4B, 0xC0, 0x04, 0x18, 0x60, 0x18, 0x68, 0x31, 0x24, 0x18, 0x60, 0x13, 0x48, 0x02, 0x60, 0x18, 0x68, 0x18, 0x60, 0x0C, 0x20, 0x12, 0x4B, 0x18, 0x60, 0x01, 0x23, 0x11, 0x48, 0x03, 0x60, 0x11, 0x48, 0x04, 0x60, 0x11, 0x48, 0xCE, 0x34, 0x04, 0x60, 0x11, 0x48, 0x02, 0x60, 0x0B, 0x70, 0x00, 0xF0, 0x49, 0xF9, 0x04, 0x23, 0x0F, 0x4A, 0x11, 0x68, 0x0B, 0x43, 0x13, 0x60, 0x00, 0xF0, 0x46, 0xF9, 0x00, 0xF0, 0x40, 0xF9, 0x80, 0x22, 0x0B, 0x4B, 0xD2, 0x04, 0x1A, 0x60, 0x00, 0xF0, 0x3E, 0xF9, 0x10, 0xBD, 0x26, 0x01, 0x00, 0x20, 0x80, 0x01, 0x06, 0x40, 0x88, 0x01, 0x06, 0x40, 0xA4, 0x01, 0x06, 0x40, 0x86},
  {0x00, 0x00, 0x34, 0x00, 0x80, 0xB8, 0x01, 0x06, 0x40, 0xA8, 0x01, 0x06, 0x40, 0x94, 0x01, 0x06, 0x40, 0x8C, 0x01, 0x06, 0x40, 0x00, 0x00, 0x06, 0x40, 0x08, 0x00, 0x06, 0x40, 0x02, 0x4B, 0x00, 0x04, 0x00, 0x0C, 0x18, 0x60, 0x70, 0x47, 0xC0, 0x46, 0x94, 0x01, 0x06, 0x40, 0x02, 0x4B, 0x00, 0x04, 0x00, 0x0C, 0x18, 0x60, 0x70, 0x47, 0xC0, 0x46, 0x8C, 0x01, 0x06, 0x40, 0x01, 0x4B, 0x18, 0x60, 0x70, 0x47, 0xC0, 0x46, 0xB0, 0x01, 0x06, 0x40, 0x10, 0xB5, 0x80, 0x24, 0x08, 0x4B, 0xA4, 0x01, 0x1C, 0x60, 0x08, 0x4B, 0x58, 0x67, 0x00, 0xF0, 0x06, 0xF9, 0xC0, 0x23, 0x06, 0x4A, 0x1B, 0x02, 0x11, 0x68, 0x0B, 0x43, 0x13, 0x60, 0x00, 0xF0, 0x02, 0xF9, 0x04, 0x4B, 0x1C, 0x60, 0x10, 0xBD, 0x80, 0xE1, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x20, 0x0C, 0xE4, 0x00, 0xE0, 0x00, 0xE1, 0x00, 0xE0, 0x30, 0xB5, 0x83, 0xB0, 0xDD},
  {0x00, 0x00, 0x35, 0x00, 0x80, 0x00, 0xF0, 0xEF, 0xF8, 0x1C, 0x22, 0x26, 0x4B, 0x05, 0x00, 0x18, 0x68, 0x25, 0x4B, 0x80, 0x00, 0x1B, 0x68, 0x10, 0x40, 0x1B, 0x07, 0x9B, 0x0F, 0x18, 0x30, 0xD8, 0x40, 0x22, 0x4B, 0x23, 0x4A, 0x19, 0x68, 0x23, 0x4B, 0x42, 0x43, 0x19, 0x40, 0x80, 0x23, 0xDB, 0x01, 0x9C, 0x46, 0x62, 0x44, 0xD2, 0x0B, 0x01, 0x3A, 0x13, 0x00, 0x0B, 0x43, 0x19, 0x28, 0x1D, 0xD8, 0x1D, 0x4A, 0x1A, 0x43, 0x19, 0x4B, 0x1D, 0x4C, 0x1A, 0x60, 0x23, 0x68, 0x30, 0x20, 0x01, 0x93, 0x00, 0xF0, 0xD0, 0xF8, 0x80, 0x21, 0x1A, 0x4A, 0xC9, 0x05, 0x13, 0x68, 0x0B, 0x43, 0x13, 0x60, 0x18, 0x4B, 0x18, 0x68, 0x83, 0x00, 0x18, 0x18, 0x80, 0x00, 0x00, 0xF0, 0xB3, 0xF8, 0x01, 0x9B, 0x28, 0x00, 0x23, 0x60, 0x00, 0xF0, 0xBB, 0xF8, 0x03, 0xB0, 0x30, 0xBD, 0x12, 0x4A, 0x82, 0x18, 0x11, 0x78, 0x12, 0x4A, 0x9D},
  {0x00, 0x00, 0x36, 0x00, 0x80, 0x10, 0x18, 0xA0, 0x22, 0x1A, 0x38, 0x00, 0x78, 0x52, 0x03, 0x13, 0x43, 0x42, 0x18, 0xFF, 0x2A, 0x02, 0xD8, 0x92, 0x05, 0x1A, 0x43, 0xD3, 0xE7, 0xFF, 0x22, 0x92, 0x05, 0x1A, 0x43, 0xCF, 0xE7, 0x08, 0x0F, 0x03, 0x40, 0x28, 0x00, 0x03, 0x40, 0x08, 0x00, 0x07, 0x40, 0x40, 0x42, 0x0F, 0x00, 0x00, 0xF8, 0x00, 0xC0, 0x00, 0x00, 0xD4, 0x3F, 0x30, 0x00, 0x10, 0x40, 0x00, 0x00, 0x07, 0x40, 0x8C, 0x00, 0x00, 0x20, 0xCD, 0xF1, 0xFF, 0x0F, 0x14, 0x1D, 0x00, 0x00, 0xF8, 0xB5, 0x05, 0x00, 0x4F, 0x46, 0x46, 0x46, 0x18, 0x3D, 0xC0, 0xB4, 0x04, 0x00, 0x18, 0x2D, 0x03, 0xD8, 0x2B, 0x4B, 0xEB, 0x40, 0xDB, 0x07, 0x03, 0xD4, 0x0C, 0xBC, 0x90, 0x46, 0x99, 0x46, 0xF8, 0xBD, 0x00, 0xF0, 0x78, 0xF8, 0x27, 0x4B, 0x81, 0x46, 0x1A, 0x68, 0x52, 0x00, 0x26, 0xD4, 0x00, 0x23, 0x98, 0x46, 0x81},
  {0x00, 0x00, 0x37, 0x00, 0x80, 0x07, 0x27, 0x24, 0x4E, 0x24, 0x4A, 0x33, 0x68, 0x24, 0x48, 0xBB, 0x43, 0x33, 0x60, 0x24, 0x4B, 0xE3, 0x18, 0x1B, 0x78, 0xDB, 0xB2, 0x13, 0x60, 0x22, 0x4A, 0x13, 0x68, 0xBB, 0x43, 0x13, 0x60, 0x21, 0x4B, 0x01, 0x68, 0xE3, 0x18, 0x1A, 0x78, 0x7F, 0x23, 0x99, 0x43, 0x13, 0x40, 0x0B, 0x43, 0x03, 0x60, 0x32, 0x20, 0x00, 0xF0, 0x4C, 0xF8, 0x18, 0x2C, 0x0D, 0xD1, 0x43, 0x46, 0x01, 0x2B, 0x1C, 0xD0, 0x48, 0x46, 0x00, 0xF0, 0x51, 0xF8, 0xCD, 0xE7, 0x19, 0x68, 0x17, 0x4A, 0x0A, 0x40, 0x1A, 0x60, 0x01, 0x23, 0x98, 0x46, 0xD3, 0xE7, 0x33, 0x68, 0x1C, 0x3C, 0xA4, 0x08, 0xBB, 0x43, 0x3C, 0x40, 0x1C, 0x43, 0x34, 0x60, 0x32, 0x20, 0x00, 0xF0, 0x32, 0xF8, 0x33, 0x68, 0xAD, 0x08, 0xBB, 0x43, 0x1D, 0x43, 0x43, 0x46, 0x35, 0x60, 0x01, 0x2B, 0xE2, 0xD1, 0x00, 0xF0, 0x18, 0xF8, 0x21},
  {0x00, 0x00, 0x38, 0x00, 0x80, 0x00, 0x28, 0xDE, 0xD0, 0xFF, 0xF7, 0x3A, 0xFF, 0xDB, 0xE7, 0xC0, 0x46, 0x11, 0x11, 0x11, 0x01, 0x00, 0x00, 0x07, 0x40, 0x08, 0x0F, 0x03, 0x40, 0x0C, 0x0F, 0x03, 0x40, 0x18, 0x0F, 0x03, 0x40, 0xCD, 0xF1, 0xFF, 0x0F, 0x10, 0x0F, 0x03, 0x40, 0xB4, 0xF1, 0xFF, 0x0F, 0xFF, 0xFF, 0xFF, 0xBF, 0x01, 0x4B, 0x18, 0x68, 0xC0, 0x0F, 0x70, 0x47, 0x00, 0x00, 0x07, 0x40, 0x01, 0x4A, 0x02, 0x4B, 0x1A, 0x60, 0x70, 0x47, 0x65, 0x88, 0xED, 0xAC, 0x38, 0x00, 0x03, 0x40, 0x00, 0x00, 0x00, 0x00, 0x02, 0x30, 0x80, 0x08, 0x03, 0xD0, 0x01, 0x30, 0x02, 0x38, 0xFC, 0xD1, 0xC0, 0x46, 0xC0, 0x46, 0x70, 0x47, 0xEF, 0xF3, 0x10, 0x80, 0x72, 0xB6, 0x70, 0x47, 0x80, 0xF3, 0x10, 0x88, 0x70, 0x47, 0x10, 0xB5, 0x04, 0x00, 0xFF, 0xF7, 0xF5, 0xFF, 0x10, 0x2C, 0x15, 0xD9, 0x20, 0x2C, 0x0B, 0xD9, 0x36},
  {0x00, 0x00, 0x39, 0x00, 0x80, 0x30, 0x2C, 0x06, 0xD8, 0x03, 0x22, 0x0B, 0x49, 0x0B, 0x68, 0x93, 0x43, 0x01, 0x3A, 0x13, 0x43, 0x0B, 0x60, 0xFF, 0xF7, 0xEA, 0xFF, 0x10, 0xBD, 0x03, 0x22, 0x06, 0x49, 0x0B, 0x68, 0x93, 0x43, 0x02, 0x3A, 0x13, 0x43, 0x0B, 0x60, 0xF4, 0xE7, 0x03, 0x21, 0x02, 0x4A, 0x13, 0x68, 0x8B, 0x43, 0x13, 0x60, 0xEE, 0xE7, 0x30, 0x00, 0x10, 0x40, 0x01, 0x4B, 0x18, 0x68, 0x70, 0x47, 0xC0, 0x46, 0x00, 0x01, 0x00, 0x20, 0x0E, 0x4B, 0x70, 0xB5, 0x00, 0x25, 0x1E, 0x00, 0x0D, 0x4C, 0xE4, 0x1A, 0xA4, 0x10, 0xA5, 0x42, 0x04, 0xD0, 0xAB, 0x00, 0xF3, 0x58, 0x98, 0x47, 0x01, 0x35, 0xF8, 0xE7, 0x00, 0xF0, 0x26, 0xF8, 0x08, 0x4B, 0x00, 0x25, 0x1E, 0x00, 0x08, 0x4C, 0xE4, 0x1A, 0xA4, 0x10, 0xA5, 0x42, 0x04, 0xD0, 0xAB, 0x00, 0xF3, 0x58, 0x98, 0x47, 0x01, 0x35, 0xF8, 0xE7, 0x70, 0xBD, 0xF6},
  {0x00, 0x00, 0x3A, 0x00, 0x80, 0x3C, 0x1D, 0x00, 0x00, 0x3C, 0x1D, 0x00, 0x00, 0x3C, 0x1D, 0x00, 0x00, 0x44, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEE, 0xDB, 0xC9, 0xB9, 0xAA, 0x9B, 0x8E, 0x82, 0x76, 0x6B, 0x60, 0x56, 0x4D, 0x44, 0x3B, 0x33, 0x2C, 0x24, 0x1D, 0x17, 0x10, 0x0A, 0x04, 0x43, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xB5, 0xC0, 0x46, 0xF8, 0xBC, 0x08, 0xBC, 0x9E, 0x46, 0x70, 0x47, 0x55, 0x16, 0x00, 0x00, 0x61, 0x17, 0x00, 0x00, 0xF8, 0xB5, 0xC0, 0x46, 0xF8, 0xBC, 0x08, 0xBC, 0x9E, 0x46, 0x70, 0x47, 0x2D, 0x16, 0x00, 0x00, 0x68, 0x1D, 0x00, 0x00, 0x88, 0x00, 0x00, 0x20, 0x80, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x5D, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x2E, 0x18, 0x00, 0x00, 0x00, 0x00, 0x36, 0x6E, 0x01, 0x57},
  {0x00, 0x00, 0x3B, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2B, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3D},
  {0x00, 0x00, 0xFF, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x72, 0x91, 0x14, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x80, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB9}
};


char transmit_buffer[32];
char receive_buffer[32];

int bootload(){
  enterBootloader();
  getFlashSize();
  for(int i = 1; i < CYACD_ROWS; i++){
    int result = parseAndFlashRow(i);
    if(result){
      Serial.println("Error: " + String(parseAndFlashRow(i), HEX));
    }
  }
  return 0;
}

int parseAndFlashRow(int row){
  
}

int sendCommand(char address, int data_len, char * data){
  Serial.print("TX:,,");
  Wire.beginTransmission(address);
  for(int i = 0; i < data_len; i++){
      Wire.write(data[i]);
      Serial.print(String(data[i], HEX));
      Serial.print(",");
  }
  Wire.endTransmission();
  Serial.println();
  return 0;
}

int getResponse(char address, char bytes){
  int i = 0; 
  Serial.print("RX:,,");
  Wire.requestFrom(address, bytes);
  while(Wire.available()){
    receive_buffer[i++] = Wire.read();
    Serial.print(String(receive_buffer[i-1], HEX));
    Serial.print(",");
  }
  Serial.println();
  return 0;
}

int verifyStatus(){
  char status = 0;
  char start_pos = findStartLocation();
  status = receive_buffer[start_pos+1];
//  Serial.println("Bootload Response - " + String(status, HEX));
  return status;
}

int findStartLocation(){
  char start_pos = 0;
  for(int i = 0; i < 32; i++){
    if(receive_buffer[i] == START_BYTE){
      start_pos = i;
      i = 32;
    }
  }
  return start_pos;
}

int verifyChecksum(){
  int checksum = 0;
  int start = findStartLocation();
  int length = receive_buffer[start + 3];
  length <<= 8;
  length |= receive_buffer[start + 2];
  for(int i = start; i < start + length + 4; i++){
    checksum += receive_buffer[i];
  }
  int rx_checksum = receive_buffer[start + length + 6];
  rx_checksum <<= 8;
  rx_checksum |= receive_buffer[start + length + 5];
  if(rx_checksum != checksum){
    return -1;
  }
  return 0;


}

int getFlashSize(){
  char data[] = {START_BYTE, 0x32, 0x01, 0x00,  0x00, 0xCC, 0xFF, END_BYTE};
  sendCommand(dev_address, 8, data);
  delay(10);
  getResponse(dev_address, 32);
  int check = verifyChecksum();
  if(check){
    return -1;
  }
  int start = findStartLocation();
  int status = verifyStatus();
  if(status){
    return status;
  }
  if((receive_buffer[start + 4] != 0x29) || (receive_buffer[start + 5] != 0x00) || (receive_buffer[start + 6] != 0xFF) || (receive_buffer[start + 7] != 0x00)){
    return -2;
  }
  return 0; //TODO: Test for required result

}

int getAppStatus(){
  // This is not applicable to the current product
  return 0;
}

int eraseRow(){
  // TODO: Implement later, not currently used.
  return 0;
}

// This resets the bootloader, may be used in error.
int syncBootloader(){
  // TODO: Implement later
  return 0;
}

int setActiveApp(){
  // Not used in the current product.
  return 0;
}

int sendData(int data_len, char * data){
  int checksum = 0x01;
  int position = 3;
  transmit_buffer[0] = START_BYTE;
  transmit_buffer[1] = CMD_SEND_DATA;
  checksum += transmit_buffer[1];
  transmit_buffer[2] = data_len & 0xFF;
  checksum += transmit_buffer[2];
  transmit_buffer[3] = (data_len >> 8) & 0xFF;
  checksum += transmit_buffer[3];
  for(int i = 0; i < data_len; i++){
    transmit_buffer[4 + i] = data[i];
    checksum += data[i];
    position = 5 + i;
  }
  checksum = (~checksum) + 1;
  transmit_buffer[position++] = (char) (checksum & 0xFF);
  transmit_buffer[position++] = (char) (checksum >> 8) & 0xFF;
  transmit_buffer[position] = 0x17;
  sendCommand(dev_address, position, transmit_buffer);
  getResponse(dev_address, 32);
  int check = verifyChecksum();
  if(check){
    return -1;
  }
  // int start = findStartLocation();
  int status = verifyStatus();
  return status;
}

int enterBootloader(){
  char data[7] = {START_BYTE, 0x38, 0, 0, 0xC7, 0xFF, END_BYTE};
  sendCommand(dev_address, 7, data);
  delay(100);
  getResponse(dev_address, 32);
  int check = verifyChecksum();
  if(check){
    return -1;
  }
  int start = findStartLocation();
  int status = verifyStatus();
  if(status){
    return status;
  }
  if((receive_buffer[start + 4] != cyacd_file[0][3]) || (receive_buffer[start + 5] != cyacd_file[0][2]) || (receive_buffer[start + 6] != cyacd_file[0][1]) || (receive_buffer[start + 7] != cyacd_file[0][0])){
    Serial.println("Device ID does not match... quitting bootload");
    return -1;
  }
  char silicon_rev = receive_buffer[start + 8];
  if(silicon_rev != receive_buffer[start + 8]){
    Serial.println("Silicon rev mismatch... continuing attempt to bootload");
  }
  char boot_ver_major = receive_buffer[start + 9];
  if(boot_ver_major != 0x32){
    Serial.println("Bootloader version (major) mismatch");
    return -2;
  }
  char boot_ver_minor = receive_buffer[start + 10];
  if(boot_ver_minor != 0x01){
    Serial.println("Bootloader version (minor) mismatch");
    return -3;
  }
  char boot_ver_app = receive_buffer[start + 11];
  if(boot_ver_app != 0x01){
    Serial.println("Bootloader version (app) mismatch");
    return -2;
  }
  return 0;
}

int programRow(int array_id, int row_number, int data_len, char* data){
  int checksum = 0x01;
  int position = 3;
  transmit_buffer[0] = START_BYTE;
  transmit_buffer[1] = CMD_PROGRAM_ROW;
  checksum += transmit_buffer[1];
  transmit_buffer[2] = (char) (data_len & 0xFF);
  checksum += transmit_buffer[2];
  transmit_buffer[3] = (char) ((data_len >> 8) & 0xFF);
  checksum += transmit_buffer[3];
  for(int i = 0; i < data_len; i++){
    transmit_buffer[4 + i] = data[i];
    checksum += data[i];
  }
  checksum = (~checksum) + 1;
  transmit_buffer[position++] = (char) (checksum & 0xFF);
  transmit_buffer[position++] = (char) (checksum >> 8) & 0xFF;
  transmit_buffer[position] = 0x17;
  sendCommand(dev_address, position, transmit_buffer);
  getResponse(dev_address, 32);
  int check = verifyChecksum();
  if(check){
    return -1;
  }
  // int start = findStartLocation();
  int status = verifyStatus();
  return status;
}

int verifyRow(char array_id, int row_number, char row_check){
  int checksum = START_BYTE + CMD_VERIFY_ROW + 0x03 + 0x00 + array_id + (row_number % 0xff) + (row_number >> 8);
  char data[] = {START_BYTE, CMD_VERIFY_ROW, 0x03, 0x00, array_id, (char) (row_number % 0xff), (char) (row_number >> 8), (char)(checksum & 0xff), (char)((checksum >> 8) & 0xFF), END_BYTE};
  sendCommand(dev_address, 10, data);
  getResponse(dev_address,32);
  int check = verifyChecksum();
  if(check){
    return -1;
  }
  int start = findStartLocation();
  int status = verifyStatus();
  if(status){
    return status;
  }
  if(row_check != receive_buffer[start + 4]){
    return -2;
  }
  return 0;
}

int exitBootloader(){
  char data[] = {START_BYTE, CMD_EXIT_BOOTLOADER, 0, 0, 0xC4, 0xFF, END_BYTE};
  sendCommand(dev_address, 9, data);
  return 0;
}